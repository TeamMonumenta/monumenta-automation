From 6159b0721497184ab4bfb3de90746e4e431c8538 Mon Sep 17 00:00:00 2001
From: Byron Marohn <combustible@live.com>
Date: Mon, 17 Sep 2018 22:03:48 -0400
Subject: [PATCH 11/11] Monumenta - Coral is always waterlogged

TODO: Patch one spigot actually modifies BlockCoralBase

Signed-off-by: Byron Marohn <combustible@live.com>
---
 src/main/java/net/minecraft/server/BlockCoral.java |  14 +--
 .../java/net/minecraft/server/BlockCoralBase.java  | 103 +++++++++++++++++++++
 2 files changed, 104 insertions(+), 13 deletions(-)
 create mode 100644 src/main/java/net/minecraft/server/BlockCoralBase.java

diff --git a/src/main/java/net/minecraft/server/BlockCoral.java b/src/main/java/net/minecraft/server/BlockCoral.java
index 71afc6ae..1f9655b4 100644
--- a/src/main/java/net/minecraft/server/BlockCoral.java
+++ b/src/main/java/net/minecraft/server/BlockCoral.java
@@ -33,19 +33,7 @@ public class BlockCoral extends Block {
     }
 
     protected boolean a(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.values();
-        int i = aenumdirection.length;
-
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-            Fluid fluid = iblockaccess.b(blockposition.shift(enumdirection));
-
-            if (fluid.a(TagsFluid.WATER)) {
-                return true;
-            }
-        }
-
-        return false;
+		return true;
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/BlockCoralBase.java b/src/main/java/net/minecraft/server/BlockCoralBase.java
new file mode 100644
index 00000000..fe613d1e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockCoralBase.java
@@ -0,0 +1,103 @@
+package net.minecraft.server;
+
+import java.util.Random;
+import javax.annotation.Nullable;
+
+public class BlockCoralBase extends Block implements IFluidSource, IFluidContainer {
+
+    public static final BlockStateBoolean b = BlockProperties.y;
+    private static final VoxelShape a = Block.a(2.0D, 0.0D, 2.0D, 14.0D, 4.0D, 14.0D);
+
+    protected BlockCoralBase(Block.Info block_info) {
+        super(block_info);
+        this.v((IBlockData) ((IBlockData) this.blockStateList.getBlockData()).set(BlockCoralBase.b, Boolean.valueOf(true)));
+    }
+
+    protected void a(IBlockData iblockdata, GeneratorAccess generatoraccess, BlockPosition blockposition) {
+        if (!b_(iblockdata, generatoraccess, blockposition)) {
+            generatoraccess.J().a(blockposition, this, 60 + generatoraccess.m().nextInt(40));
+        }
+
+    }
+
+    protected static boolean b_(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+		return true; 
+    }
+
+    protected boolean X_() {
+        return true;
+    }
+
+    public int a(IBlockData iblockdata, Random random) {
+        return 0;
+    }
+
+    @Nullable
+    public IBlockData getPlacedState(BlockActionContext blockactioncontext) {
+        Fluid fluid = blockactioncontext.getWorld().b(blockactioncontext.getClickPosition());
+
+        return (IBlockData) this.getBlockData().set(BlockCoralBase.b, Boolean.valueOf(fluid.a(TagsFluid.WATER) && fluid.g() == 8));
+    }
+
+    public VoxelShape a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return BlockCoralBase.a;
+    }
+
+    public boolean a(IBlockData iblockdata) {
+        return false;
+    }
+
+    public TextureType c() {
+        return TextureType.CUTOUT;
+    }
+
+    public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
+        return EnumBlockFaceShape.UNDEFINED;
+    }
+
+    public IBlockData updateState(IBlockData iblockdata, EnumDirection enumdirection, IBlockData iblockdata1, GeneratorAccess generatoraccess, BlockPosition blockposition, BlockPosition blockposition1) {
+        if (((Boolean) iblockdata.get(BlockCoralBase.b)).booleanValue()) {
+            generatoraccess.I().a(blockposition, FluidTypes.c, FluidTypes.c.a((IWorldReader) generatoraccess));
+        }
+
+        return enumdirection == EnumDirection.DOWN && !this.canPlace(iblockdata, generatoraccess, blockposition) ? Blocks.AIR.getBlockData() : super.updateState(iblockdata, enumdirection, iblockdata1, generatoraccess, blockposition, blockposition1);
+    }
+
+    public boolean canPlace(IBlockData iblockdata, IWorldReader iworldreader, BlockPosition blockposition) {
+        return iworldreader.getType(blockposition.down()).q();
+    }
+
+    protected void a(BlockStateList.a<Block, IBlockData> blockstatelist_a) {
+        blockstatelist_a.a(new IBlockState[] { BlockCoralBase.b});
+    }
+
+    public Fluid h(IBlockData iblockdata) {
+        return ((Boolean) iblockdata.get(BlockCoralBase.b)).booleanValue() ? FluidTypes.c.a(false) : super.h(iblockdata);
+    }
+
+    public FluidType a(GeneratorAccess generatoraccess, BlockPosition blockposition, IBlockData iblockdata) {
+        if (((Boolean) iblockdata.get(BlockCoralBase.b)).booleanValue()) {
+            generatoraccess.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockCoralBase.b, Boolean.valueOf(false)), 3);
+            return FluidTypes.c;
+        } else {
+            return FluidTypes.a;
+        }
+    }
+
+    public boolean canPlace(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, FluidType fluidtype) {
+        return !((Boolean) iblockdata.get(BlockCoralBase.b)).booleanValue() && fluidtype == FluidTypes.c;
+    }
+
+    public boolean place(GeneratorAccess generatoraccess, BlockPosition blockposition, IBlockData iblockdata, Fluid fluid) {
+        if (!((Boolean) iblockdata.get(BlockCoralBase.b)).booleanValue() && fluid.c() == FluidTypes.c) {
+            if (!generatoraccess.e()) {
+                generatoraccess.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockCoralBase.b, Boolean.valueOf(true)), 3);
+                generatoraccess.I().a(blockposition, fluid.c(), fluid.c().a((IWorldReader) generatoraccess));
+            }
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
-- 
2.14.1

